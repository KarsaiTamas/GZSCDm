class HealableActorsThinker:Thinker
{
    Array<Base> healableActors;
    //BaseSpawner baseMonsterSpawner;
    Array<BaseSpawnerData> monsterReplacers;

    HealableActorsThinker Init()
    {
        ChangeStatNum(STAT_STATIC);

        //self.baseMonsterSpawner.Init();
        self.monsterReplacers.push(new("BaseSpawnerData").Init("ZombieMan"));
        int i=0;
        self.monsterReplacers[i].possibleActorsToSpawn.push(
            new("BaseSpawnData").Init("StarcraftMarine",90,TERRAN_SC1));
        self.monsterReplacers[i].possibleActorsToSpawn.push(
            new("BaseSpawnData").Init("StarcraftMedic",10,TERRAN_SC1));
        //Console.Printf(self.monsterReplacers[i].possibleActorsToSpawn[0].baseMonsterName);
        return self;
    }
    int GetMonsterSpawner(string mName)
    {
        for(int i=0;i<monsterReplacers.Size();i++)
        {
            if(monsterReplacers[i].IsMonsterName(mName))
            {
                return i;
            }
        }
        return -1;
    }
    static HealableActorsThinker GetInstance()
    {
        ThinkerIterator it=ThinkerIterator.Create("HealableActorsThinker",STAT_STATIC);
        Thinker t=it.Next();
        if(t)
        {
            return HealableActorsThinker(t);
        }
        return new("HealableActorsThinker").Init();
    }
    static clearscope HealableActorsThinker GetReadOnlyInstance()
    {
        ThinkerIterator it=ThinkerIterator.Create("HealableActorsThinker",STAT_STATIC);
        Thinker t=it.Next();
        if(t)
        {
            return HealableActorsThinker(t);
        }
        return null;
    }

    void PrintAllActors()
    {
        for(int i=0;i<healableActors.Size();i++)
        {
            Console.Printf(healableActors[i].Species);
        }
    }
    void PrintSizeOfLiveActors()
    {
        Console.Printf("Number of Living actors: %d",healableActors.Size());
    }

    Base GetHealTarget(Base medic)
    {
        //Array<Base> candidates; 
        for(int i=0;i<healableActors.Size();i++)
        { 
            /*Console.Printf("Range to check: %d,Distance: %d, %s, %d/%dHP,%s,%s",
            medic.meleerange*2,medic.Distance3D( liveActors[i]),
            medic.IsFriend(liveActors[i])?"Friend":"Foe",liveActors[i].health,liveActors[i].SpawnHealth(),
            liveActors[i].canBeHealed?"Can be healed":"No heal",liveActors[i]!=medic?"Not it self":"It self"
        );*/

            if(medic.meleerange*2>medic.Distance3D( healableActors[i]) && medic.team==healableActors[i].team &&
            healableActors[i].health<healableActors[i].SpawnHealth() && healableActors[i].canBeHealed && healableActors[i]!=medic)
            {
                //Console.Printf("Found Target.");
                return healableActors[i];
                //candidates.Push(liveActors[i]);
            }
        
        }
        //Console.Printf("No target");
        return null;
        //return candidates.Size()==0?null: candidates[0];
    }
}