class BaseSpawnerData
{
    name replacedMonsterName;
    Array<BaseSpawnData> possibleActorsToSpawn; 
    /*BaseSpawnerData Init(string replacedMonsterName,Array<BaseSpawnData> possibleActorsToSpawn)
    {
        self.replacedMonsterName=replacedMonsterName;
        self.possibleActorsToSpawn=possibleActorsToSpawn;
        return self;
    }*/
    BaseSpawnerData Init(name replacedMonsterName)
    {
        self.replacedMonsterName=replacedMonsterName;
        possibleActorsToSpawn.Clear();
        return self;
    }
    bool IsMonsterName(name repMonsterName)
    {
        return replacedMonsterName==repMonsterName;
    }

    name GetSpawnActor()
    {
        Console.Printf("%d",possibleActorsToSpawn.Size());

        for(int i=0;i<possibleActorsToSpawn.Size();i++)
        {
            int ran=Random(1,100);
            if(possibleActorsToSpawn[i].chance>=ran)
            {
                return possibleActorsToSpawn[i].baseMonsterName;
            }
        }
        return possibleActorsToSpawn[possibleActorsToSpawn.Size()-1].baseMonsterName;
    }


}
class BaseSpawnData
{
    name baseMonsterName;
    int chance;
    RaceEnum raceType;

    BaseSpawnData Init(name baseMonsterName,int chanceToSpawn, RaceEnum raceType)
    {
        self.baseMonsterName=baseMonsterName;
        self.chance=chanceToSpawn;
        self.raceType=raceType;
        return self;
    }

}
